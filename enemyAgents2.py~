import sys, pygame, math, numpy, random, time, copy
from pygame.locals import *

from constants import *
from utils import *
from core import *
from moba import *


class MyMinion(Minion):
	
	def __init__(self, position, orientation, world, image = NPC, speed = SPEED, viewangle = 360, hitpoints = HITPOINTS, firerate = FIRERATE, bulletclass = SmallBullet):
		Minion.__init__(self, position, orientation, world, image, speed, viewangle, hitpoints, firerate, bulletclass)
		self.states = [Idle]
		### Add your states to self.states (but don't remove Idle)
		### YOUR CODE GOES BELOW HERE ###

		self.states.append(MoveToTarget)
		self.states.append(Attack)

		### YOUR CODE GOES ABOVE HERE ###

	def start(self):
		print "yup2"
		Minion.start(self)
		self.changeState(MoveToTarget)



class Idle(State):
	
	def enter(self, oldstate):
		#State.enter(self, oldstate)
		# stop moving
		self.agent.stopMoving()


	def execute(self, delta = 0):

            targets = self.agent.world.getEnemyNPCs(self.agent.getTeam())
            for target in targets :
                if isinstance(target, Hero) :
                    if distance(self.agent.getLocation(), target.getLocation()) < 2*BULLETRANGE :
                        self.agent.changeState(Attack, target)
                    break

            return None


class Attack(State):

    def parseArgs(self, args):
        self.target = args[0]


    def execute(self, delta = 0):

        if self.agent.target.getHitpoints() <= 0 :
            self.changeState(MoveToTarget)
            return None

        self.agent.navigateTo(self.target.getLocation())

        if distance(self.agent.getLocation(), self.target.getLocation()) > BULLETRANGE :
            return None
        else :
            self.agent.turnToFace(self.target.getLocation())
            self.agent.shoot()


class MoveToTarget(State):

	def enter(self, oldstate):
		self.agent.navigateTo((self.agent.world.dimensions[0]*9/10, self.agent.world.dimensions[1]/10))

	def execute(self, delta = 0):
		
            target = (self.agent.world.dimensions[0]/2, self.agent.world.dimensions[1]/2)
            if distance(self.agent.getLocation(), target) < 10 :
                self.agent.changeState(Idle)
                return None
            
            targets = self.agent.world.getEnemyNPCs(self.agent.getTeam())
            for enemy in targets :
                if isinstance(enemy, Hero) :
                    if distance(self.agent.getLocation(), enemy.getLocation()) < 2*BULLETRANGE :
                        self.agent.changeState(Attack)
                    return None
